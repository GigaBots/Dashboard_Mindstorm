for ( var i = 1; i <= numMotors; i++ ) {
                var motorPort = letters[i];
                motors[ motorPort ] = new Motor( game, motorPort );
                var positionX = positionMotors[ motorPort ].x;
                var positionY = positionMotors[ motorPort ].y;
                frames[ motorPort ] = new Frame( game, motorPort, positionX, positionY, 275, 232);
                topBars[ motorPort ] = game.add.sprite( positionX+1, positionY+1,'motorBar');
                labelMotors[ motorPort ] = game.add.text( positionX+8, positionY+1+browserFix, motors[ letters[i] ].name, titleStyle );
                dials[ motorPort ] = new RotationDial( game, motorPort , numbers[ motorPort ] );               
                dials[ motorPort ].animations.play('pluggedIn');
                needles[ motorPort ] = new RotationNeedle( game, motorPort , numbers[ motorPort ] );
                dividers[ motorPort ] = game.add.sprite( positionX+7, positionY+93, 'dividerLine' );
                sliderTracks[ motorPort] = game.add.sprite( positionX+170, positionY+39, 'sliderIncrements' );
                for ( var k = 0; k <= 7; k++ ) {
                    var speedLabel = 100 * k + "";
                    sliderSpeedIncrements[ motorPort ] = game.add.text( positionX+243, positionY+185-22*k+browserFix, speedLabel, labelStyle );
                }
                sliderSpeedLabels[ motorPort ] = game.add.text( positionX+160, positionY+206+browserFix, "Speed (\xB0/sec)", labelStyle );
                currentSpeedLabels[ motorPort ] = game.add.text( positionX+69, positionY+38+browserFix, "Current Speed", labelStyle );
                directionConfigLabels[ motorPort ] = game.add.text(positionX+37, positionY+206+browserFix, "Swap Directions", labelStyle );
                forwardButtons[ motorPort ] = new ForwardButton( game, motorPort );
                reverseButtons[ motorPort ] = new ReverseButton( game, motorPort );
                motorPlusButtons[ motorPort ] = new MotorPlusButton( game, motorPort );
                motorMinusButtons[ motorPort ] = new MotorMinusButton( game, motorPort );
                sliderBars[ motorPort ] = new SliderBar( game, motorPort );
                directionChecks[ motorPort ] = new DirectionCheckbox( game, motorPort );
            }
          /* Create Gangs */
            for ( var i = 1; i <= numGangs; i++ ) {
                gangs[ i ] = new Gang( game, i );
                var positionX = positionGangs[ i ].x;
                var positionY = positionGangs[ i ].y;
                frames[ i ] = new Frame( game, i, positionX, positionY, 275, 231 + numCheckboxRows * 28);
                topBars[ i ] = game.add.sprite( positionX+1, positionY+1,'gangBar');                
                dividers[ i + 'a' ] = game.add.sprite( positionX+7, positionY+58, 'dividerLine' );
                dividers[ i + 'b' ] = game.add.sprite( positionX+7, positionY+204, 'dividerLine2' );
                gangLabels[ i ] = game.add.text( positionX+8, positionY+1+browserFix, gangs[ i ].name, titleStyle );
                sliderTracks[ i ] = game.add.sprite( positionX+170, positionY+39, 'sliderIncrements' );                
                for ( var k = 0; k <= 7; k++ ) {
                    var speedLabel = 100 * k + "";
                    sliderSpeedIncrements[ i ][ k ] = game.add.text( positionX+243, positionY+185-22*k+browserFix, speedLabel, labelStyle );
                }
                sliderSpeedLabels[ i ] = game.add.text( positionX+160, positionY+206+browserFix, "Speed (\xB0/sec)", labelStyle );
                currentSpeedLabels[ i ] = game.add.text( positionX+12, positionY+33+browserFix, "Current Speed", labelStyle );
                directionsNote[ i ] = game.add.text(positionX+11, positionY+166+browserFix, "*Forward and Reverse\n directions are relative", noteStyle), 
                gangForwardButtons[ i ] = new GangForwardButton( game, i );
                gangReverseButtons[ i ] = new GangReverseButton( game, i );
                gangPlusButtons[ i ] = new GangPlusButton( game, i );
                gangMinusButtons[ i ] = new GangMinusButton( game, i );
                gangSliderBars[ i ] = new GangSliderBar( game, i );
                gangCheckboxes[ i ] = new GangCheckbox( game, i );
                gangMotorLabels[ i ] = new GangMotorLabel( game, i );
                gangMotorLabels[ i ][ 'motors' ] = game.add.text( positionX+12, positionY+207+browserFix, "Motors Selected", labelStyle );
                // arrange checkboxes:
                if ( numMotors <= 6 ) {
                    var spacing = Math.ceil( frames[ i ].width / ( numMotors + 1 ) );
                    for ( var j = 1; j <= numMotors; j++ ) {
                        gangCheckboxes[ i ][ letters[j] ] = new MotorCheckbox( game, i, letters[j], positionX + Math.floor( spacing/2 ) + (j-1) * spacing, positionY + 231 );
                        gangMotorLabels[ i ][ letters[j] ] = game.add.text( gangCheckboxes[i][ letters[j] ].x + 26, gangCheckboxes[i][ letters[j] ].y + 2 + browserFix, letters[j].toUpperCase(), labelStyle );
                    }
                }
                if ( numMotors > 6 ) {
                    var checkboxRow = {}
                    var numMotorsAdded = 0;
                    for ( var k = 1; k <= numCheckboxRows; k++ ) {
                        if ( k === 1 ) {
                            checkboxRow[ k ] = Math.ceil( numMotors / numCheckboxRows )
                            checkboxRow[ k + 'spacing' ] = Math.ceil( frames[ i ].width / ( checkboxRow[ k ] + 1 ) );
                            for ( var j = 1; j <= checkboxRow[ k ]; j++ ) {
                                gangCheckboxes[ i ][ letters[j] ] = new MotorCheckbox( game, i, letters[j], positionX + Math.floor( checkboxRow[ k + 'spacing' ] / 2 ) + (j-1) * checkboxRow[ k + 'spacing' ], positionY + 203 + k * 28 );
                                gangMotorLabels[ i ][ letters[j] ] = game.add.text( gangCheckboxes[i][ letters[j] ].x + 26, gangCheckboxes[i][ letters[j] ].y + 2 + browserFix, letters[j].toUpperCase(), labelStyle );
                            }
                            numMotorsAdded += checkboxRow[ k ];
                        } 
                        else {
                            checkboxRow[ k ] = Math.ceil( ( numMotors - numMotorsAdded ) / ( numCheckboxRows - ( k - 1 ) ) );
                            checkboxRow[ k + 'spacing' ] = Math.ceil( frames[ i ].width / ( checkboxRow[ k ] + 1 ) );
                            for ( var j = numMotorsAdded + 1; j <= numMotorsAdded + checkboxRow[ k ]; j++ ) {
                                gangCheckboxes[ i ][ letters[j] ] = new MotorCheckbox( game, i, letters[j], positionX + Math.floor( checkboxRow[ k + 'spacing' ] / 2 ) + (j-1-numMotorsAdded) * checkboxRow[ k + 'spacing' ], positionY + 203 + k * 28 );
                                gangMotorLabels[ i ][ letters[j] ] = game.add.text( gangCheckboxes[i][ letters[j] ].x + 26, gangCheckboxes[i][ letters[j] ].y + 2 + browserFix, letters[j].toUpperCase(), labelStyle );
                            }
                            numMotorsAdded += checkboxRow[ k ];
                        }
                    }
                }    
            }